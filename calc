import java.util.*;

public class Main {

    private static final NavigableMap<Integer, String> arabicToRomanMap = new TreeMap<>();
    private static final Map<String, Integer> romanToIntMap = new HashMap<>();

    static {
        arabicToRomanMap.put(100, "C");
        arabicToRomanMap.put(90, "XC");
        arabicToRomanMap.put(50, "L");
        arabicToRomanMap.put(40, "XL");
        arabicToRomanMap.put(10, "X");
        arabicToRomanMap.put(9, "IX");
        arabicToRomanMap.put(5, "V");
        arabicToRomanMap.put(4, "IV");
        arabicToRomanMap.put(1, "I");

        romanToIntMap.put("I", 1);
        romanToIntMap.put("IV", 4);
        romanToIntMap.put("V", 5);
        romanToIntMap.put("IX", 9);
        romanToIntMap.put("X", 10);
        romanToIntMap.put("XL", 40);
        romanToIntMap.put("L", 50);
        romanToIntMap.put("XC", 90);
        romanToIntMap.put("C", 100);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNextLine()) {
            String input = scanner.nextLine();
            if (input.isEmpty()) break; // Завершаем ввод, если строка пустая
            try {
                String result = calculate(input);
                System.out.println(result);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }

    public static String calculate(String input) throws Exception {
        String[] tokens = input.split(" ");
        if (tokens.length != 3) {
            throw new Exception("Формат математической операции не удовлетворяет заданию - два операнда и один оператор (+, -, /, *)");
        }

        String operand1 = tokens[0];
        String operand2 = tokens[2];
        String operator = tokens[1];

        boolean isRoman = operand1.matches("^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$");

        if (isRoman != operand2.matches("^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$")) {
            throw new Exception("Используются одновременно разные системы счисления");
        }

        int number1;
        int number2;

        if (isRoman) {
            number1 = romanToArabic(operand1);
            number2 = romanToArabic(operand2);
        } else {
            number1 = Integer.parseInt(operand1);
            number2 = Integer.parseInt(operand2);
        }

        if (number1 < 1 || number1 > 10 || number2 < 1 || number2 > 10) {
            throw new Exception("Вводимые числа должны быть от 1 до 10 включительно");
        }

        int result;
        switch (operator) {
            case "+":
                result = number1 + number2;
                break;
            case "-":
                result = number1 - number2;
                break;
            case "*":
                result = number1 * number2;
                break;
            case "/":
                result = number1 / number2;
                break;
            default:
                throw new Exception("Строка не является математической операцией");
        }

        if (isRoman) {
            if (result < 1) throw new Exception("В римской системе нет отрицательных чисел");
            return arabicToRoman(result);
        } else {
            return String.valueOf(result);
        }
    }

    public static String arabicToRoman(int number) {
        if (number <= 0) {
            throw new IllegalArgumentException("Roman numeral must be positive");
        }
        StringBuilder sb = new StringBuilder();
        for (Integer i : arabicToRomanMap.descendingKeySet()) {
            while (number >= i) {
                sb.append(arabicToRomanMap.get(i));
                number -= i;
            }
        }
        return sb.toString();
    }

    public static int romanToArabic(String roman) {
        int result = 0;
        int previous = 0;
        for (String symbol : roman.split("")) {
            int current = romanToIntMap.get(symbol);
            if (current > previous) {
                result += current - 2 * previous;
            } else {
                result += current;
            }
            previous = current;
        }
        return result;
    }
}
